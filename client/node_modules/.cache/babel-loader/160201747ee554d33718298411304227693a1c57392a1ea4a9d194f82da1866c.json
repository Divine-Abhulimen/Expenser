{"ast":null,"code":"import * as pdfjsLib from 'pdfjs-dist';\n\n// Set up the worker for pdf.js\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\nexport async function DownloadUpdatedFile(pdfUrl, jsonResult) {\n  const response = await fetch(pdfUrl);\n  const arrayBuffer = await response.arrayBuffer();\n  const pdfDoc = await PDFDocument.load(arrayBuffer);\n  const form = pdfDoc.getForm();\n\n  // Set values\n  const fieldName = jsonResult[1].inputField.fieldName;\n  const field = form.getTextField(fieldName);\n  field.setText('Some valye');\n\n  // fields become uneditable\n  form.flatten();\n  const pdfBytes = await pdfDoc.save();\n\n  // Trigger file download in the browser\n  const blob = new Blob([pdfBytes], {\n    type: 'application/pdf'\n  });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = 'filled-form-' + pdfUrl.substring(pdfUrl.lastIndexOf('/') + 1) + '.pdf';\n  a.click();\n  URL.revokeObjectURL(url);\n}\n_c = DownloadUpdatedFile;\nexport async function PDF_TO_JSON(pdfUrl) {\n  const loadingTask = pdfjsLib.getDocument({\n    url: pdfUrl,\n    cMapUrl: \"https://unpkg.com/pdfjs-dist@latest/cmaps/\",\n    cMapPacked: true\n  });\n  const pdf = await loadingTask.promise;\n  console.log(\"PDF loaded successfully\");\n  const results = [];\n  for (let i = 1; i <= pdf.numPages; i++) {\n    const page = await pdf.getPage(i);\n    const textContent = await page.getTextContent();\n    const annotations = await page.getAnnotations();\n\n    // Find the \"Region\" label\n    let regionLabel = null;\n    for (const item of textContent.items) {\n      if (item.str.trim() === \"Region\") {\n        const [,,,, x, y] = item.transform;\n        regionLabel = {\n          x,\n          y\n        };\n        break;\n      }\n    }\n    if (regionLabel) {\n      // Find the nearest input field above the \"Region\" label\n      let nearestField = null;\n      let minDistance = Infinity;\n      for (const annotation of annotations) {\n        const [x1, y1, x2, y2] = annotation.rect;\n        const fieldY = (y1 + y2) / 2;\n        const fieldX = (x1 + x2) / 2;\n\n        // Check if the field is above the label and within horizontal range\n        if (fieldY > regionLabel.y && Math.abs(fieldX - regionLabel.x) < 100) {\n          const distance = fieldY - regionLabel.y;\n          if (distance < minDistance) {\n            minDistance = distance;\n            nearestField = {\n              label: \"Region\",\n              inputField: {\n                fieldName: annotation.fieldName || \"Unnamed Field\",\n                inputType: annotation.fieldType || \"Unknown\",\n                value: annotation.fieldValue || \"\",\n                options: annotation.options ? annotation.options.map(opt => opt.displayValue || opt.value) : []\n              }\n            };\n          }\n        }\n      }\n      if (nearestField) {\n        results.push(nearestField);\n      }\n    }\n\n    // Find the \"Court File No. (if known)\" label\n    let courtFileLabel = null;\n    for (const item of textContent.items) {\n      if (item.str.trim() === \"Court File No. (if known)\") {\n        const [,,,, x, y] = item.transform;\n        courtFileLabel = {\n          x,\n          y\n        };\n        break;\n      }\n    }\n    if (courtFileLabel) {\n      // Find the nearest text input field above the label\n      let nearestField = null;\n      let minDistance = Infinity;\n      for (const annotation of annotations) {\n        const [x1, y1, x2, y2] = annotation.rect;\n        const fieldY = (y1 + y2) / 2;\n        const fieldX = (x1 + x2) / 2;\n\n        // Check if the field is above the label, within horizontal range, and is a text field\n        if (fieldY > courtFileLabel.y && Math.abs(fieldX - courtFileLabel.x) < 100 && annotation.fieldType === \"Tx\") {\n          const distance = fieldY - courtFileLabel.y;\n          if (distance < minDistance) {\n            minDistance = distance;\n            nearestField = {\n              label: \"Court File No. (if known)\",\n              inputField: {\n                fieldName: annotation.fieldName || \"Unnamed Field\",\n                inputType: annotation.fieldType || \"Unknown\",\n                value: annotation.fieldValue || \"\",\n                options: []\n              }\n            };\n          }\n        }\n      }\n      if (nearestField) {\n        results.push(nearestField);\n      }\n    }\n  }\n  return results;\n}\n_c2 = PDF_TO_JSON;\nvar _c, _c2;\n$RefreshReg$(_c, \"DownloadUpdatedFile\");\n$RefreshReg$(_c2, \"PDF_TO_JSON\");","map":{"version":3,"names":["pdfjsLib","GlobalWorkerOptions","workerSrc","version","DownloadUpdatedFile","pdfUrl","jsonResult","response","fetch","arrayBuffer","pdfDoc","PDFDocument","load","form","getForm","fieldName","inputField","field","getTextField","setText","flatten","pdfBytes","save","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","substring","lastIndexOf","click","revokeObjectURL","_c","PDF_TO_JSON","loadingTask","getDocument","cMapUrl","cMapPacked","pdf","promise","console","log","results","i","numPages","page","getPage","textContent","getTextContent","annotations","getAnnotations","regionLabel","item","items","str","trim","x","y","transform","nearestField","minDistance","Infinity","annotation","x1","y1","x2","y2","rect","fieldY","fieldX","Math","abs","distance","label","inputType","fieldType","value","fieldValue","options","map","opt","displayValue","push","courtFileLabel","_c2","$RefreshReg$"],"sources":["C:/Users/Vidu/OneDrive/Desktop/Xenon Innovation/Expenser/client/src/components/FillForm/PdfToJson.js"],"sourcesContent":["import * as pdfjsLib from 'pdfjs-dist';\r\n\r\n// Set up the worker for pdf.js\r\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\r\nexport async function DownloadUpdatedFile(pdfUrl, jsonResult) {\r\n    const response = await fetch(pdfUrl);\r\n    const arrayBuffer = await response.arrayBuffer();\r\n    const pdfDoc = await PDFDocument.load(arrayBuffer);\r\n    const form = pdfDoc.getForm();\r\n\r\n    // Set values\r\n    const fieldName = jsonResult[1].inputField.fieldName;\r\n    const field = form.getTextField(fieldName);\r\n    field.setText('Some valye');\r\n\r\n    // fields become uneditable\r\n    form.flatten();\r\n\r\n    const pdfBytes = await pdfDoc.save();\r\n\r\n    // Trigger file download in the browser\r\n    const blob = new Blob([pdfBytes], { type: 'application/pdf' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = 'filled-form-' + pdfUrl.substring(pdfUrl.lastIndexOf('/') + 1) + '.pdf';\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n}\r\nexport async function PDF_TO_JSON(pdfUrl) {\r\n    const loadingTask = pdfjsLib.getDocument({\r\n        url: pdfUrl,\r\n        cMapUrl: \"https://unpkg.com/pdfjs-dist@latest/cmaps/\",\r\n        cMapPacked: true,\r\n    });\r\n\r\n    const pdf = await loadingTask.promise;\r\n    console.log(\"PDF loaded successfully\");\r\n\r\n    const results = [];\r\n\r\n    for (let i = 1; i <= pdf.numPages; i++) {\r\n        const page = await pdf.getPage(i);\r\n        const textContent = await page.getTextContent();\r\n        const annotations = await page.getAnnotations();\r\n\r\n        // Find the \"Region\" label\r\n        let regionLabel = null;\r\n        for (const item of textContent.items) {\r\n            if (item.str.trim() === \"Region\") {\r\n                const [, , , , x, y] = item.transform;\r\n                regionLabel = { x, y };\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (regionLabel) {\r\n            // Find the nearest input field above the \"Region\" label\r\n            let nearestField = null;\r\n            let minDistance = Infinity;\r\n\r\n            for (const annotation of annotations) {\r\n                const [x1, y1, x2, y2] = annotation.rect;\r\n                const fieldY = (y1 + y2) / 2;\r\n                const fieldX = (x1 + x2) / 2;\r\n\r\n                // Check if the field is above the label and within horizontal range\r\n                if (fieldY > regionLabel.y && Math.abs(fieldX - regionLabel.x) < 100) {\r\n                    const distance = fieldY - regionLabel.y;\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestField = {\r\n                            label: \"Region\",\r\n                            inputField: {\r\n                                fieldName: annotation.fieldName || \"Unnamed Field\",\r\n                                inputType: annotation.fieldType || \"Unknown\",\r\n                                value: annotation.fieldValue || \"\",\r\n                                options: annotation.options ? annotation.options.map(opt => opt.displayValue || opt.value) : []\r\n                            }\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (nearestField) {\r\n                results.push(nearestField);\r\n            }\r\n        }\r\n\r\n        // Find the \"Court File No. (if known)\" label\r\n        let courtFileLabel = null;\r\n        for (const item of textContent.items) {\r\n            if (item.str.trim() === \"Court File No. (if known)\") {\r\n                const [, , , , x, y] = item.transform;\r\n                courtFileLabel = { x, y };\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (courtFileLabel) {\r\n            // Find the nearest text input field above the label\r\n            let nearestField = null;\r\n            let minDistance = Infinity;\r\n\r\n            for (const annotation of annotations) {\r\n                const [x1, y1, x2, y2] = annotation.rect;\r\n                const fieldY = (y1 + y2) / 2;\r\n                const fieldX = (x1 + x2) / 2;\r\n\r\n                // Check if the field is above the label, within horizontal range, and is a text field\r\n                if (\r\n                    fieldY > courtFileLabel.y &&\r\n                    Math.abs(fieldX - courtFileLabel.x) < 100 &&\r\n                    annotation.fieldType === \"Tx\"\r\n                ) {\r\n                    const distance = fieldY - courtFileLabel.y;\r\n                    if (distance < minDistance) {\r\n                        minDistance = distance;\r\n                        nearestField = {\r\n                            label: \"Court File No. (if known)\",\r\n                            inputField: {\r\n                                fieldName: annotation.fieldName || \"Unnamed Field\",\r\n                                inputType: annotation.fieldType || \"Unknown\",\r\n                                value: annotation.fieldValue || \"\",\r\n                                options: []\r\n                            }\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (nearestField) {\r\n                results.push(nearestField);\r\n            }\r\n        }\r\n    }\r\n\r\n    return results;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}