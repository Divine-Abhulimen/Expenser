{"ast":null,"code":"import * as pdfjsLib from 'pdfjs-dist';\n\n// Set up the worker for pdf.js\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\nexport async function PDF_TO_JSON(pdfUrl) {\n  const loadingTask = pdfjsLib.getDocument({\n    url: pdfUrl,\n    cMapUrl: \"https://unpkg.com/pdfjs-dist@latest/cmaps/\",\n    cMapPacked: true\n  });\n  const pdf = await loadingTask.promise;\n  console.log(\"PDF loaded successfully\");\n  const results = [];\n  for (let i = 1; i <= pdf.numPages; i++) {\n    const page = await pdf.getPage(i);\n    const annotations = await page.getAnnotations();\n    const textContent = await page.getTextContent();\n    const items = textContent.items;\n\n    // Map text items with their positions\n    const textItems = items.map(item => {\n      const [a, b, c, d, x, y] = item.transform;\n      return {\n        text: item.str.trim(),\n        x,\n        y\n      };\n    });\n\n    // Sort text items from top to bottom\n    textItems.sort((a, b) => b.y - a.y);\n    for (const annotation of annotations) {\n      const [x1, y1, x2, y2] = annotation.rect;\n      const width = x2 - x1;\n      const height = y2 - y1;\n      const centerX = x1 + width / 2;\n      const centerY = y1 + height / 2;\n      let associatedLabel = \"No associated label\";\n\n      // Define proximity thresholds\n      const verticalThreshold = 20;\n      const horizontalThreshold = 50;\n\n      // Find nearby text items\n      const nearbyTexts = textItems.filter(item => {\n        const dx = Math.abs(item.x - centerX);\n        const dy = Math.abs(item.y - centerY);\n        return dx <= horizontalThreshold && dy <= verticalThreshold;\n      });\n\n      // Apply specific rules\n      for (const item of nearbyTexts) {\n        const text = item.text;\n\n        // Rule: Label with lowercase letter and closing bracket for checkboxes\n        if (annotation.fieldName && annotation.fieldName.toLowerCase().includes(\"chk\")) {\n          if (/[a-z]\\)/.test(text)) {\n            associatedLabel = text;\n            break;\n          }\n        }\n\n        // Rule: Label with lowercase letter and dot for input fields\n        if (/[a-z]\\./.test(text)) {\n          associatedLabel = text;\n          break;\n        }\n\n        // Rule: Specific labels with input fields above\n        if ([\"Region\", \"Court File No. (if known)\"].includes(text)) {\n          // Check for input field above the label\n          const aboveText = textItems.find(t => t.y > item.y && Math.abs(t.x - item.x) < horizontalThreshold);\n          if (aboveText) {\n            associatedLabel = text;\n            break;\n          }\n        }\n\n        // Rule: Date-related labels with input fields to the right\n        if ([\"Date at\", \", this\", \"day of\", \", 20\"].some(prefix => text.startsWith(prefix))) {\n          // Check for input field to the right of the label\n          const rightText = textItems.find(t => t.y === item.y && t.x > item.x && t.x - item.x < horizontalThreshold);\n          if (rightText) {\n            associatedLabel = text;\n            break;\n          }\n        }\n\n        // Rule: Signature label with input field below\n        if (text === \"Signature of Authorized Court Transcriptionist\") {\n          // Check for input field below the label\n          const belowText = textItems.find(t => t.y < item.y && Math.abs(t.x - item.x) < horizontalThreshold);\n          if (belowText) {\n            associatedLabel = text;\n            break;\n          }\n        }\n\n        // Rule: Address-related label with multiple input fields below\n        if (text === \"(Set out name and address, as well as telephone number and email)\") {\n          // Check for multiple input fields below the label\n          const belowTexts = textItems.filter(t => t.y < item.y && Math.abs(t.x - item.x) < horizontalThreshold);\n          if (belowTexts.length >= 4) {\n            associatedLabel = text;\n            break;\n          }\n        }\n      }\n      results.push({\n        label: associatedLabel,\n        inputField: annotation.fieldName || \"Unnamed Field\"\n      });\n    }\n  }\n  return results;\n}\n_c = PDF_TO_JSON;\nvar _c;\n$RefreshReg$(_c, \"PDF_TO_JSON\");","map":{"version":3,"names":["pdfjsLib","GlobalWorkerOptions","workerSrc","version","PDF_TO_JSON","pdfUrl","loadingTask","getDocument","url","cMapUrl","cMapPacked","pdf","promise","console","log","results","i","numPages","page","getPage","annotations","getAnnotations","textContent","getTextContent","items","textItems","map","item","a","b","c","d","x","y","transform","text","str","trim","sort","annotation","x1","y1","x2","y2","rect","width","height","centerX","centerY","associatedLabel","verticalThreshold","horizontalThreshold","nearbyTexts","filter","dx","Math","abs","dy","fieldName","toLowerCase","includes","test","aboveText","find","t","some","prefix","startsWith","rightText","belowText","belowTexts","length","push","label","inputField","_c","$RefreshReg$"],"sources":["C:/Users/Vidu/OneDrive/Desktop/Xenon Innovation/Expenser/client/src/components/FillForm/PdfToJson.js"],"sourcesContent":["import * as pdfjsLib from 'pdfjs-dist';\r\n\r\n// Set up the worker for pdf.js\r\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\r\n\r\nexport async function PDF_TO_JSON(pdfUrl) {\r\n    const loadingTask = pdfjsLib.getDocument({\r\n        url: pdfUrl,\r\n        cMapUrl: \"https://unpkg.com/pdfjs-dist@latest/cmaps/\",\r\n        cMapPacked: true,\r\n    });\r\n\r\n    const pdf = await loadingTask.promise;\r\n    console.log(\"PDF loaded successfully\");\r\n\r\n    const results = [];\r\n\r\n    for (let i = 1; i <= pdf.numPages; i++) {\r\n        const page = await pdf.getPage(i);\r\n        const annotations = await page.getAnnotations();\r\n        const textContent = await page.getTextContent();\r\n        const items = textContent.items;\r\n\r\n        // Map text items with their positions\r\n        const textItems = items.map(item => {\r\n            const [a, b, c, d, x, y] = item.transform;\r\n            return {\r\n                text: item.str.trim(),\r\n                x,\r\n                y\r\n            };\r\n        });\r\n\r\n        // Sort text items from top to bottom\r\n        textItems.sort((a, b) => b.y - a.y);\r\n\r\n        for (const annotation of annotations) {\r\n            const [x1, y1, x2, y2] = annotation.rect;\r\n            const width = x2 - x1;\r\n            const height = y2 - y1;\r\n            const centerX = x1 + width / 2;\r\n            const centerY = y1 + height / 2;\r\n\r\n            let associatedLabel = \"No associated label\";\r\n\r\n            // Define proximity thresholds\r\n            const verticalThreshold = 20;\r\n            const horizontalThreshold = 50;\r\n\r\n            // Find nearby text items\r\n            const nearbyTexts = textItems.filter(item => {\r\n                const dx = Math.abs(item.x - centerX);\r\n                const dy = Math.abs(item.y - centerY);\r\n                return dx <= horizontalThreshold && dy <= verticalThreshold;\r\n            });\r\n\r\n            // Apply specific rules\r\n            for (const item of nearbyTexts) {\r\n                const text = item.text;\r\n\r\n                // Rule: Label with lowercase letter and closing bracket for checkboxes\r\n                if (annotation.fieldName && annotation.fieldName.toLowerCase().includes(\"chk\")) {\r\n                    if (/[a-z]\\)/.test(text)) {\r\n                        associatedLabel = text;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // Rule: Label with lowercase letter and dot for input fields\r\n                if (/[a-z]\\./.test(text)) {\r\n                    associatedLabel = text;\r\n                    break;\r\n                }\r\n\r\n                // Rule: Specific labels with input fields above\r\n                if ([\"Region\", \"Court File No. (if known)\"].includes(text)) {\r\n                    // Check for input field above the label\r\n                    const aboveText = textItems.find(t => t.y > item.y && Math.abs(t.x - item.x) < horizontalThreshold);\r\n                    if (aboveText) {\r\n                        associatedLabel = text;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // Rule: Date-related labels with input fields to the right\r\n                if ([\"Date at\", \", this\", \"day of\", \", 20\"].some(prefix => text.startsWith(prefix))) {\r\n                    // Check for input field to the right of the label\r\n                    const rightText = textItems.find(t => t.y === item.y && t.x > item.x && t.x - item.x < horizontalThreshold);\r\n                    if (rightText) {\r\n                        associatedLabel = text;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // Rule: Signature label with input field below\r\n                if (text === \"Signature of Authorized Court Transcriptionist\") {\r\n                    // Check for input field below the label\r\n                    const belowText = textItems.find(t => t.y < item.y && Math.abs(t.x - item.x) < horizontalThreshold);\r\n                    if (belowText) {\r\n                        associatedLabel = text;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // Rule: Address-related label with multiple input fields below\r\n                if (text === \"(Set out name and address, as well as telephone number and email)\") {\r\n                    // Check for multiple input fields below the label\r\n                    const belowTexts = textItems.filter(t => t.y < item.y && Math.abs(t.x - item.x) < horizontalThreshold);\r\n                    if (belowTexts.length >= 4) {\r\n                        associatedLabel = text;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            results.push({\r\n                label: associatedLabel,\r\n                inputField: annotation.fieldName || \"Unnamed Field\"\r\n            });\r\n        }\r\n    }\r\n\r\n    return results;\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,QAAQ,MAAM,YAAY;;AAEtC;AACAA,QAAQ,CAACC,mBAAmB,CAACC,SAAS,GAAG,2CAA2CF,QAAQ,CAACG,OAAO,oBAAoB;AAExH,OAAO,eAAeC,WAAWA,CAACC,MAAM,EAAE;EACtC,MAAMC,WAAW,GAAGN,QAAQ,CAACO,WAAW,CAAC;IACrCC,GAAG,EAAEH,MAAM;IACXI,OAAO,EAAE,4CAA4C;IACrDC,UAAU,EAAE;EAChB,CAAC,CAAC;EAEF,MAAMC,GAAG,GAAG,MAAML,WAAW,CAACM,OAAO;EACrCC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EAEtC,MAAMC,OAAO,GAAG,EAAE;EAElB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIL,GAAG,CAACM,QAAQ,EAAED,CAAC,EAAE,EAAE;IACpC,MAAME,IAAI,GAAG,MAAMP,GAAG,CAACQ,OAAO,CAACH,CAAC,CAAC;IACjC,MAAMI,WAAW,GAAG,MAAMF,IAAI,CAACG,cAAc,CAAC,CAAC;IAC/C,MAAMC,WAAW,GAAG,MAAMJ,IAAI,CAACK,cAAc,CAAC,CAAC;IAC/C,MAAMC,KAAK,GAAGF,WAAW,CAACE,KAAK;;IAE/B;IACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,GAAG,CAACC,IAAI,IAAI;MAChC,MAAM,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGN,IAAI,CAACO,SAAS;MACzC,OAAO;QACHC,IAAI,EAAER,IAAI,CAACS,GAAG,CAACC,IAAI,CAAC,CAAC;QACrBL,CAAC;QACDC;MACJ,CAAC;IACL,CAAC,CAAC;;IAEF;IACAR,SAAS,CAACa,IAAI,CAAC,CAACV,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACI,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IAEnC,KAAK,MAAMM,UAAU,IAAInB,WAAW,EAAE;MAClC,MAAM,CAACoB,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,GAAGJ,UAAU,CAACK,IAAI;MACxC,MAAMC,KAAK,GAAGH,EAAE,GAAGF,EAAE;MACrB,MAAMM,MAAM,GAAGH,EAAE,GAAGF,EAAE;MACtB,MAAMM,OAAO,GAAGP,EAAE,GAAGK,KAAK,GAAG,CAAC;MAC9B,MAAMG,OAAO,GAAGP,EAAE,GAAGK,MAAM,GAAG,CAAC;MAE/B,IAAIG,eAAe,GAAG,qBAAqB;;MAE3C;MACA,MAAMC,iBAAiB,GAAG,EAAE;MAC5B,MAAMC,mBAAmB,GAAG,EAAE;;MAE9B;MACA,MAAMC,WAAW,GAAG3B,SAAS,CAAC4B,MAAM,CAAC1B,IAAI,IAAI;QACzC,MAAM2B,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC7B,IAAI,CAACK,CAAC,GAAGe,OAAO,CAAC;QACrC,MAAMU,EAAE,GAAGF,IAAI,CAACC,GAAG,CAAC7B,IAAI,CAACM,CAAC,GAAGe,OAAO,CAAC;QACrC,OAAOM,EAAE,IAAIH,mBAAmB,IAAIM,EAAE,IAAIP,iBAAiB;MAC/D,CAAC,CAAC;;MAEF;MACA,KAAK,MAAMvB,IAAI,IAAIyB,WAAW,EAAE;QAC5B,MAAMjB,IAAI,GAAGR,IAAI,CAACQ,IAAI;;QAEtB;QACA,IAAII,UAAU,CAACmB,SAAS,IAAInB,UAAU,CAACmB,SAAS,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;UAC5E,IAAI,SAAS,CAACC,IAAI,CAAC1B,IAAI,CAAC,EAAE;YACtBc,eAAe,GAAGd,IAAI;YACtB;UACJ;QACJ;;QAEA;QACA,IAAI,SAAS,CAAC0B,IAAI,CAAC1B,IAAI,CAAC,EAAE;UACtBc,eAAe,GAAGd,IAAI;UACtB;QACJ;;QAEA;QACA,IAAI,CAAC,QAAQ,EAAE,2BAA2B,CAAC,CAACyB,QAAQ,CAACzB,IAAI,CAAC,EAAE;UACxD;UACA,MAAM2B,SAAS,GAAGrC,SAAS,CAACsC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC/B,CAAC,GAAGN,IAAI,CAACM,CAAC,IAAIsB,IAAI,CAACC,GAAG,CAACQ,CAAC,CAAChC,CAAC,GAAGL,IAAI,CAACK,CAAC,CAAC,GAAGmB,mBAAmB,CAAC;UACnG,IAAIW,SAAS,EAAE;YACXb,eAAe,GAAGd,IAAI;YACtB;UACJ;QACJ;;QAEA;QACA,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC8B,IAAI,CAACC,MAAM,IAAI/B,IAAI,CAACgC,UAAU,CAACD,MAAM,CAAC,CAAC,EAAE;UACjF;UACA,MAAME,SAAS,GAAG3C,SAAS,CAACsC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC/B,CAAC,KAAKN,IAAI,CAACM,CAAC,IAAI+B,CAAC,CAAChC,CAAC,GAAGL,IAAI,CAACK,CAAC,IAAIgC,CAAC,CAAChC,CAAC,GAAGL,IAAI,CAACK,CAAC,GAAGmB,mBAAmB,CAAC;UAC3G,IAAIiB,SAAS,EAAE;YACXnB,eAAe,GAAGd,IAAI;YACtB;UACJ;QACJ;;QAEA;QACA,IAAIA,IAAI,KAAK,gDAAgD,EAAE;UAC3D;UACA,MAAMkC,SAAS,GAAG5C,SAAS,CAACsC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC/B,CAAC,GAAGN,IAAI,CAACM,CAAC,IAAIsB,IAAI,CAACC,GAAG,CAACQ,CAAC,CAAChC,CAAC,GAAGL,IAAI,CAACK,CAAC,CAAC,GAAGmB,mBAAmB,CAAC;UACnG,IAAIkB,SAAS,EAAE;YACXpB,eAAe,GAAGd,IAAI;YACtB;UACJ;QACJ;;QAEA;QACA,IAAIA,IAAI,KAAK,mEAAmE,EAAE;UAC9E;UACA,MAAMmC,UAAU,GAAG7C,SAAS,CAAC4B,MAAM,CAACW,CAAC,IAAIA,CAAC,CAAC/B,CAAC,GAAGN,IAAI,CAACM,CAAC,IAAIsB,IAAI,CAACC,GAAG,CAACQ,CAAC,CAAChC,CAAC,GAAGL,IAAI,CAACK,CAAC,CAAC,GAAGmB,mBAAmB,CAAC;UACtG,IAAImB,UAAU,CAACC,MAAM,IAAI,CAAC,EAAE;YACxBtB,eAAe,GAAGd,IAAI;YACtB;UACJ;QACJ;MACJ;MAEApB,OAAO,CAACyD,IAAI,CAAC;QACTC,KAAK,EAAExB,eAAe;QACtByB,UAAU,EAAEnC,UAAU,CAACmB,SAAS,IAAI;MACxC,CAAC,CAAC;IACN;EACJ;EAEA,OAAO3C,OAAO;AAClB;AAAC4D,EAAA,GAtHqBvE,WAAW;AAAA,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}