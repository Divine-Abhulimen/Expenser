{"ast":null,"code":"import * as pdfjsLib from 'pdfjs-dist';\n\n// Set up the worker for pdf.js\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\nexport async function PDF_TO_JSON(pdfUrl) {\n  const loadingTask = pdfjsLib.getDocument({\n    url: pdfUrl,\n    cMapUrl: \"https://unpkg.com/pdfjs-dist@latest/cmaps/\",\n    cMapPacked: true\n  });\n  const pdf = await loadingTask.promise;\n  console.log(\"PDF loaded successfully\");\n  const results = [];\n  for (let i = 1; i <= pdf.numPages; i++) {\n    const page = await pdf.getPage(i);\n    const annotations = await page.getAnnotations();\n    const textContent = await page.getTextContent();\n    const items = textContent.items;\n    for (const annotation of annotations) {\n      const [x1, y1, x2, y2] = annotation.rect;\n      const width = x2 - x1;\n      const height = y2 - y1;\n      const margin = 20;\n      const searchAreas = [{\n        xMin: x1,\n        xMax: x2,\n        yMin: y2,\n        yMax: y2 + margin\n      }, {\n        xMin: x1 - margin,\n        xMax: x1,\n        yMin: y1,\n        yMax: y2\n      }];\n      const potentialLabels = items.filter(item => {\n        const [a, b, c, d, x, y] = item.transform;\n        return searchAreas.some(area => x >= area.xMin && x <= area.xMax && y >= area.yMin && y <= area.yMax);\n      });\n      const label = potentialLabels.map(item => item.str).join(' ').trim();\n      results.push({\n        label: label || \"No associated label\",\n        inputField: annotation.fieldName || \"Unnamed Field\"\n      });\n    }\n  }\n  return results;\n}\n_c = PDF_TO_JSON;\nvar _c;\n$RefreshReg$(_c, \"PDF_TO_JSON\");","map":{"version":3,"names":["pdfjsLib","GlobalWorkerOptions","workerSrc","version","PDF_TO_JSON","pdfUrl","loadingTask","getDocument","url","cMapUrl","cMapPacked","pdf","promise","console","log","results","i","numPages","page","getPage","annotations","getAnnotations","textContent","getTextContent","items","annotation","x1","y1","x2","y2","rect","width","height","margin","searchAreas","xMin","xMax","yMin","yMax","potentialLabels","filter","item","a","b","c","d","x","y","transform","some","area","label","map","str","join","trim","push","inputField","fieldName","_c","$RefreshReg$"],"sources":["C:/Users/Vidu/OneDrive/Desktop/Xenon Innovation/Expenser/client/src/components/FillForm/PdfToJson.js"],"sourcesContent":["import * as pdfjsLib from 'pdfjs-dist';\r\n\r\n// Set up the worker for pdf.js\r\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\r\n\r\nexport async function PDF_TO_JSON(pdfUrl) {\r\n    const loadingTask = pdfjsLib.getDocument({\r\n        url: pdfUrl,\r\n        cMapUrl: \"https://unpkg.com/pdfjs-dist@latest/cmaps/\",\r\n        cMapPacked: true,\r\n    });\r\n\r\n    const pdf = await loadingTask.promise;\r\n    console.log(\"PDF loaded successfully\");\r\n\r\n    const results = [];\r\n\r\n    for (let i = 1; i <= pdf.numPages; i++) {\r\n        const page = await pdf.getPage(i);\r\n        const annotations = await page.getAnnotations();\r\n        const textContent = await page.getTextContent();\r\n        const items = textContent.items;\r\n\r\n        for (const annotation of annotations) {\r\n            const [x1, y1, x2, y2] = annotation.rect;\r\n            const width = x2 - x1;\r\n            const height = y2 - y1;\r\n\r\n            const margin = 20;\r\n            const searchAreas = [\r\n                { xMin: x1, xMax: x2, yMin: y2, yMax: y2 + margin },\r\n                { xMin: x1 - margin, xMax: x1, yMin: y1, yMax: y2 },\r\n            ];\r\n\r\n            const potentialLabels = items.filter(item => {\r\n                const [a, b, c, d, x, y] = item.transform;\r\n                return searchAreas.some(area =>\r\n                    x >= area.xMin && x <= area.xMax && y >= area.yMin && y <= area.yMax\r\n                );\r\n            });\r\n\r\n            const label = potentialLabels.map(item => item.str).join(' ').trim();\r\n\r\n            results.push({\r\n                label: label || \"No associated label\",\r\n                inputField: annotation.fieldName || \"Unnamed Field\"\r\n            });\r\n        }\r\n    }\r\n\r\n    return results;\r\n}"],"mappings":"AAAA,OAAO,KAAKA,QAAQ,MAAM,YAAY;;AAEtC;AACAA,QAAQ,CAACC,mBAAmB,CAACC,SAAS,GAAG,2CAA2CF,QAAQ,CAACG,OAAO,oBAAoB;AAExH,OAAO,eAAeC,WAAWA,CAACC,MAAM,EAAE;EACtC,MAAMC,WAAW,GAAGN,QAAQ,CAACO,WAAW,CAAC;IACrCC,GAAG,EAAEH,MAAM;IACXI,OAAO,EAAE,4CAA4C;IACrDC,UAAU,EAAE;EAChB,CAAC,CAAC;EAEF,MAAMC,GAAG,GAAG,MAAML,WAAW,CAACM,OAAO;EACrCC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EAEtC,MAAMC,OAAO,GAAG,EAAE;EAElB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIL,GAAG,CAACM,QAAQ,EAAED,CAAC,EAAE,EAAE;IACpC,MAAME,IAAI,GAAG,MAAMP,GAAG,CAACQ,OAAO,CAACH,CAAC,CAAC;IACjC,MAAMI,WAAW,GAAG,MAAMF,IAAI,CAACG,cAAc,CAAC,CAAC;IAC/C,MAAMC,WAAW,GAAG,MAAMJ,IAAI,CAACK,cAAc,CAAC,CAAC;IAC/C,MAAMC,KAAK,GAAGF,WAAW,CAACE,KAAK;IAE/B,KAAK,MAAMC,UAAU,IAAIL,WAAW,EAAE;MAClC,MAAM,CAACM,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,GAAGJ,UAAU,CAACK,IAAI;MACxC,MAAMC,KAAK,GAAGH,EAAE,GAAGF,EAAE;MACrB,MAAMM,MAAM,GAAGH,EAAE,GAAGF,EAAE;MAEtB,MAAMM,MAAM,GAAG,EAAE;MACjB,MAAMC,WAAW,GAAG,CAChB;QAAEC,IAAI,EAAET,EAAE;QAAEU,IAAI,EAAER,EAAE;QAAES,IAAI,EAAER,EAAE;QAAES,IAAI,EAAET,EAAE,GAAGI;MAAO,CAAC,EACnD;QAAEE,IAAI,EAAET,EAAE,GAAGO,MAAM;QAAEG,IAAI,EAAEV,EAAE;QAAEW,IAAI,EAAEV,EAAE;QAAEW,IAAI,EAAET;MAAG,CAAC,CACtD;MAED,MAAMU,eAAe,GAAGf,KAAK,CAACgB,MAAM,CAACC,IAAI,IAAI;QACzC,MAAM,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGN,IAAI,CAACO,SAAS;QACzC,OAAOd,WAAW,CAACe,IAAI,CAACC,IAAI,IACxBJ,CAAC,IAAII,IAAI,CAACf,IAAI,IAAIW,CAAC,IAAII,IAAI,CAACd,IAAI,IAAIW,CAAC,IAAIG,IAAI,CAACb,IAAI,IAAIU,CAAC,IAAIG,IAAI,CAACZ,IACpE,CAAC;MACL,CAAC,CAAC;MAEF,MAAMa,KAAK,GAAGZ,eAAe,CAACa,GAAG,CAACX,IAAI,IAAIA,IAAI,CAACY,GAAG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,CAAC;MAEpExC,OAAO,CAACyC,IAAI,CAAC;QACTL,KAAK,EAAEA,KAAK,IAAI,qBAAqB;QACrCM,UAAU,EAAEhC,UAAU,CAACiC,SAAS,IAAI;MACxC,CAAC,CAAC;IACN;EACJ;EAEA,OAAO3C,OAAO;AAClB;AAAC4C,EAAA,GA9CqBvD,WAAW;AAAA,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}