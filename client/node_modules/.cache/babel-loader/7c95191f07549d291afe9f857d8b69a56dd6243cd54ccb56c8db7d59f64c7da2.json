{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vidu\\\\OneDrive\\\\Desktop\\\\Xenon Innovation\\\\Expenser\\\\client\\\\src\\\\components\\\\FillForm\\\\FillForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { doc, updateDoc } from 'firebase/firestore';\nimport { db } from '../../config';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport { PDFDocument, rgb } from 'pdf-lib';\n\n// Set up the worker for pdf.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\nfunction FillForm({\n  pdfData,\n  onClose\n}) {\n  _s();\n  const [formValues, setFormValues] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Initialize form values\n  useEffect(() => {\n    if (!(pdfData !== null && pdfData !== void 0 && pdfData.formFields)) {\n      setError(\"No form fields found in this PDF\");\n      return;\n    }\n    const initialValues = {};\n    pdfData.formFields.forEach(field => {\n      initialValues[field.id] = field.value || '';\n    });\n    setFormValues(initialValues);\n  }, [pdfData]);\n  const handleInputChange = (fieldId, value) => {\n    setFormValues(prev => ({\n      ...prev,\n      [fieldId]: value\n    }));\n  };\n  const generateFilledPDF = async () => {\n    // These are not accurate formFields for the files we're working with\n    if (!(pdfData !== null && pdfData !== void 0 && pdfData.formFields) || pdfData.formFields.length === 0) {\n      setError(\"No form fields to fill out\");\n      return;\n    }\n    if (!pdfData.originalPdfUrl) {\n      setError(\"Original PDF URL is missing\");\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      // Validate the URL\n      // const pdfUrl = new URL(pdfData.originalPdfUrl);\n\n      const response = await fetch(pdfData.originalPdfUrl);\n      const arrayBuffer = await response.arrayBuffer();\n      const pdfDoc = await PDFDocument.load(arrayBuffer);\n      const form = pdfDoc.getForm();\n      const fields = form.getFields();\n      fields.forEach(field => {\n        const type = field.constructor.name;\n        const name = field.getName();\n        let value;\n        switch (type) {\n          case 'PDFTextField':\n            value = field.getText();\n            break;\n          case 'PDFCheckBox':\n            value = field.isChecked();\n            break;\n          case 'PDFDropdown':\n          case 'PDFOptionList':\n            value = field.getSelected();\n            break;\n          case 'PDFRadioGroup':\n            value = field.getSelected();\n            break;\n          default:\n            value = 'Unsupported field type';\n        }\n        console.log(`${type} - ${name}: ${value}`);\n      });\n\n      // if (!pdfUrl.protocol.startsWith('http')) {\n      //     throw new Error('Invalid PDF URL protocol');\n      // }\n\n      // // Load the original PDF with timeout and error handling\n      // const controller = new AbortController();\n      // const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n\n      // const response = await fetch(pdfData.originalPdfUrl, {\n      //     signal: controller.signal,\n      //     headers: {\n      //         'Accept': 'application/pdf'\n      //     }\n      // });\n\n      // clearTimeout(timeoutId);\n\n      // if (!response.ok) {\n      //     throw new Error(`Failed to load PDF: ${response.status} ${response.statusText}`);\n      // }\n\n      // const pdfBytes = await response.arrayBuffer();\n      // if (!pdfBytes || pdfBytes.byteLength === 0) {\n      //     throw new Error('Received empty PDF data');\n      // }\n\n      // const pdfDoc = await PDFDocument.load(pdfBytes);\n\n      // // Add text to each page\n      // for (const field of pdfData.formFields) {\n      //     const page = pdfDoc.getPage(field.position.page - 1);\n      //     const { width, height } = page.getSize();\n\n      //     // Convert coordinates to PDF space\n      //     const x = field.position.x;\n      //     const y = height - field.position.y; // Flip Y coordinate\n\n      //     // Add the text\n      //     page.drawText(formValues[field.id] || '', {\n      //         x,\n      //         y,\n      //         size: 12,\n      //         color: rgb(0, 0, 0)\n      //     });\n      // }\n\n      // // Save the modified PDF\n      // const modifiedPdfBytes = await pdfDoc.save();\n\n      // // Create a download link\n      // const blob = new Blob([modifiedPdfBytes], { type: 'application/pdf' });\n      // const downloadUrl = URL.createObjectURL(blob);\n      // const link = document.createElement('a');\n      // link.href = downloadUrl;\n      // link.download = `filled_${pdfData.name}`;\n      // link.click();\n      // URL.revokeObjectURL(downloadUrl);\n\n      // // Update the form data in Firestore\n      // const pdfRef = doc(db, 'pdfs', pdfData.id);\n      // await updateDoc(pdfRef, {\n      //     formValues,\n      //     lastFilled: new Date().toISOString()\n      // });\n\n      onClose();\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n      if (error.name === 'AbortError') {\n        setError('Request timed out while loading the PDF');\n      } else if (error.message.includes('Failed to load PDF')) {\n        setError('Unable to access the PDF file. Please check if the file exists and is accessible.');\n      } else {\n        setError('Error generating filled PDF: ' + error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  if (!(pdfData !== null && pdfData !== void 0 && pdfData.formFields) || pdfData.formFields.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fill-form-modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fill-form-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No form fields found in this PDF.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-button\",\n          onClick: onClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fill-form-modal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fill-form-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Fill Form: \", pdfData.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-fields\",\n        children: pdfData.formFields.map(field => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: field.id,\n            children: field.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 29\n          }, this), field.type === 'checkbox' ? /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: field.id,\n            checked: formValues[field.id] || false,\n            onChange: e => handleInputChange(field.id, e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 33\n          }, this) : field.type === 'signature' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"signature-pad\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: field.id,\n              value: formValues[field.id] || '',\n              onChange: e => handleInputChange(field.id, e.target.value),\n              placeholder: \"Type signature\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n            type: field.type,\n            id: field.id,\n            value: formValues[field.id] || '',\n            onChange: e => handleInputChange(field.id, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 33\n          }, this)]\n        }, field.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"generate-button\",\n          onClick: generateFilledPDF,\n          disabled: loading,\n          children: loading ? 'Generating PDF...' : 'Generate Filled PDF'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-button\",\n          onClick: onClose,\n          disabled: loading,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 9\n  }, this);\n}\n_s(FillForm, \"sYc5jaXsTVp9s8Eeg5YxQ6tiffo=\");\n_c = FillForm;\nexport default FillForm;\nvar _c;\n$RefreshReg$(_c, \"FillForm\");","map":{"version":3,"names":["React","useState","useEffect","doc","updateDoc","db","pdfjsLib","PDFDocument","rgb","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","FillForm","pdfData","onClose","_s","formValues","setFormValues","loading","setLoading","error","setError","formFields","initialValues","forEach","field","id","value","handleInputChange","fieldId","prev","generateFilledPDF","length","originalPdfUrl","response","fetch","arrayBuffer","pdfDoc","load","form","getForm","fields","getFields","type","constructor","name","getName","getText","isChecked","getSelected","console","log","message","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","htmlFor","label","checked","onChange","e","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Vidu/OneDrive/Desktop/Xenon Innovation/Expenser/client/src/components/FillForm/FillForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { doc, updateDoc } from 'firebase/firestore';\r\nimport { db } from '../../config';\r\nimport * as pdfjsLib from 'pdfjs-dist';\r\nimport { PDFDocument, rgb } from 'pdf-lib';\r\n\r\n// Set up the worker for pdf.js\r\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\r\n\r\nfunction FillForm({ pdfData, onClose }) {\r\n    const [formValues, setFormValues] = useState({});\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Initialize form values\r\n    useEffect(() => {\r\n        if (!pdfData?.formFields) {\r\n            setError(\"No form fields found in this PDF\");\r\n            return;\r\n        }\r\n\r\n        const initialValues = {};\r\n        pdfData.formFields.forEach(field => {\r\n            initialValues[field.id] = field.value || '';\r\n        });\r\n        setFormValues(initialValues);\r\n    }, [pdfData]);\r\n\r\n    const handleInputChange = (fieldId, value) => {\r\n        setFormValues(prev => ({\r\n            ...prev,\r\n            [fieldId]: value\r\n        }));\r\n    };\r\n\r\n    const generateFilledPDF = async () => {\r\n        // These are not accurate formFields for the files we're working with\r\n        if (!pdfData?.formFields || pdfData.formFields.length === 0) {\r\n            setError(\"No form fields to fill out\");\r\n            return;\r\n        }\r\n\r\n        if (!pdfData.originalPdfUrl) {\r\n            setError(\"Original PDF URL is missing\");\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            // Validate the URL\r\n            // const pdfUrl = new URL(pdfData.originalPdfUrl);\r\n\r\n            const response = await fetch(pdfData.originalPdfUrl);\r\n            const arrayBuffer = await response.arrayBuffer();\r\n            const pdfDoc = await PDFDocument.load(arrayBuffer);\r\n\r\n            const form = pdfDoc.getForm();\r\n            const fields = form.getFields();\r\n\r\n            fields.forEach(field => {\r\n                const type = field.constructor.name;\r\n                const name = field.getName();\r\n                let value;\r\n\r\n                switch (type) {\r\n                    case 'PDFTextField':\r\n                        value = field.getText();\r\n                        break;\r\n                    case 'PDFCheckBox':\r\n                        value = field.isChecked();\r\n                        break;\r\n                    case 'PDFDropdown':\r\n                    case 'PDFOptionList':\r\n                        value = field.getSelected();\r\n                        break;\r\n                    case 'PDFRadioGroup':\r\n                        value = field.getSelected();\r\n                        break;\r\n                    default:\r\n                        value = 'Unsupported field type';\r\n                }\r\n\r\n                console.log(`${type} - ${name}: ${value}`);\r\n            });\r\n\r\n\r\n            // if (!pdfUrl.protocol.startsWith('http')) {\r\n            //     throw new Error('Invalid PDF URL protocol');\r\n            // }\r\n\r\n            // // Load the original PDF with timeout and error handling\r\n            // const controller = new AbortController();\r\n            // const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\r\n\r\n            // const response = await fetch(pdfData.originalPdfUrl, {\r\n            //     signal: controller.signal,\r\n            //     headers: {\r\n            //         'Accept': 'application/pdf'\r\n            //     }\r\n            // });\r\n\r\n            // clearTimeout(timeoutId);\r\n\r\n            // if (!response.ok) {\r\n            //     throw new Error(`Failed to load PDF: ${response.status} ${response.statusText}`);\r\n            // }\r\n\r\n            // const pdfBytes = await response.arrayBuffer();\r\n            // if (!pdfBytes || pdfBytes.byteLength === 0) {\r\n            //     throw new Error('Received empty PDF data');\r\n            // }\r\n\r\n            // const pdfDoc = await PDFDocument.load(pdfBytes);\r\n\r\n            // // Add text to each page\r\n            // for (const field of pdfData.formFields) {\r\n            //     const page = pdfDoc.getPage(field.position.page - 1);\r\n            //     const { width, height } = page.getSize();\r\n                \r\n            //     // Convert coordinates to PDF space\r\n            //     const x = field.position.x;\r\n            //     const y = height - field.position.y; // Flip Y coordinate\r\n\r\n            //     // Add the text\r\n            //     page.drawText(formValues[field.id] || '', {\r\n            //         x,\r\n            //         y,\r\n            //         size: 12,\r\n            //         color: rgb(0, 0, 0)\r\n            //     });\r\n            // }\r\n\r\n            // // Save the modified PDF\r\n            // const modifiedPdfBytes = await pdfDoc.save();\r\n            \r\n            // // Create a download link\r\n            // const blob = new Blob([modifiedPdfBytes], { type: 'application/pdf' });\r\n            // const downloadUrl = URL.createObjectURL(blob);\r\n            // const link = document.createElement('a');\r\n            // link.href = downloadUrl;\r\n            // link.download = `filled_${pdfData.name}`;\r\n            // link.click();\r\n            // URL.revokeObjectURL(downloadUrl);\r\n\r\n            // // Update the form data in Firestore\r\n            // const pdfRef = doc(db, 'pdfs', pdfData.id);\r\n            // await updateDoc(pdfRef, {\r\n            //     formValues,\r\n            //     lastFilled: new Date().toISOString()\r\n            // });\r\n\r\n            onClose();\r\n        } catch (error) {\r\n            console.error('Error generating PDF:', error);\r\n            if (error.name === 'AbortError') {\r\n                setError('Request timed out while loading the PDF');\r\n            } else if (error.message.includes('Failed to load PDF')) {\r\n                setError('Unable to access the PDF file. Please check if the file exists and is accessible.');\r\n            } else {\r\n                setError('Error generating filled PDF: ' + error.message);\r\n            }\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    if (!pdfData?.formFields || pdfData.formFields.length === 0) {\r\n        return (\r\n            <div className=\"fill-form-modal\">\r\n                <div className=\"fill-form-content\">\r\n                    <h2>Error</h2>\r\n                    <p>No form fields found in this PDF.</p>\r\n                    <button className=\"cancel-button\" onClick={onClose}>\r\n                        Close\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"fill-form-modal\">\r\n            <div className=\"fill-form-content\">\r\n                <h2>Fill Form: {pdfData.name}</h2>\r\n                \r\n                <div className=\"form-fields\">\r\n                    {pdfData.formFields.map((field) => (\r\n                        <div key={field.id} className=\"form-field\">\r\n                            <label htmlFor={field.id}>{field.label}</label>\r\n                            {field.type === 'checkbox' ? (\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    id={field.id}\r\n                                    checked={formValues[field.id] || false}\r\n                                    onChange={(e) => handleInputChange(field.id, e.target.checked)}\r\n                                />\r\n                            ) : field.type === 'signature' ? (\r\n                                <div className=\"signature-pad\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        id={field.id}\r\n                                        value={formValues[field.id] || ''}\r\n                                        onChange={(e) => handleInputChange(field.id, e.target.value)}\r\n                                        placeholder=\"Type signature\"\r\n                                    />\r\n                                </div>\r\n                            ) : (\r\n                                <input\r\n                                    type={field.type}\r\n                                    id={field.id}\r\n                                    value={formValues[field.id] || ''}\r\n                                    onChange={(e) => handleInputChange(field.id, e.target.value)}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {error && <div className=\"error\">{error}</div>}\r\n\r\n                <div className=\"button-group\">\r\n                    <button\r\n                        className=\"generate-button\"\r\n                        onClick={generateFilledPDF}\r\n                        disabled={loading}\r\n                    >\r\n                        {loading ? 'Generating PDF...' : 'Generate Filled PDF'}\r\n                    </button>\r\n                    <button\r\n                        className=\"cancel-button\"\r\n                        onClick={onClose}\r\n                        disabled={loading}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FillForm; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}