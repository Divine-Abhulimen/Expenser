{"ast":null,"code":"import * as pdfjsLib from 'pdfjs-dist';\n\n// Set up the worker for pdf.js\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\nexport async function PDF_TO_JSON(pdfUrl) {\n  const loadingTask = pdfjsLib.getDocument({\n    url: pdfUrl,\n    cMapUrl: \"https://unpkg.com/pdfjs-dist@latest/cmaps/\",\n    cMapPacked: true\n  });\n  const pdf = await loadingTask.promise;\n  console.log(\"PDF loaded successfully\");\n  const results = [];\n  for (let i = 1; i <= pdf.numPages; i++) {\n    const page = await pdf.getPage(i);\n    const annotations = await page.getAnnotations();\n    const textContent = await page.getTextContent();\n    const items = textContent.items;\n\n    // Sort text items by Y position descending (top to bottom)\n    const sortedItems = items.sort((a, b) => b.transform[5] - a.transform[5]);\n    for (const annotation of annotations) {\n      const [x1, y1, x2, y2] = annotation.rect;\n      const width = x2 - x1;\n      const height = y2 - y1;\n\n      // Determine the field type\n      let inputType = \"Unknown\";\n      if (annotation.fieldType === \"Tx\") {\n        inputType = \"TextBox\";\n      } else if (annotation.fieldType === \"Ch\") {\n        inputType = \"DropDown\";\n      } else if (annotation.fieldType === \"Btn\") {\n        if (annotation.checkBox) {\n          inputType = \"CheckBox\";\n        } else if (annotation.radioButton) {\n          inputType = \"RadioButton\";\n        } else {\n          inputType = \"Button\";\n        }\n      }\n\n      // Retrieve the field value\n      const fieldValue = annotation.fieldValue || \"\";\n\n      // Retrieve dropdown options if applicable\n      let options = [];\n      if (inputType === \"DropDown\" && annotation.options) {\n        options = annotation.options.map(opt => opt.displayValue || opt.value);\n      }\n\n      // Find associated label based on heuristics\n      let label = \"No associated label\";\n      for (const item of sortedItems) {\n        const [a, b, c, d, x, y] = item.transform;\n        const text = item.str.trim();\n\n        // Heuristic: If label contains \"Region\" or \"Court File No. (if known)\", it's above the input\n        if ([\"Region\", \"Court File No. (if known)\"].includes(text) && y > y2 && y - y2 < 50) {\n          label = text;\n          break;\n        }\n\n        // Heuristic: If label contains \"Date at\" and input is to the right\n        if (text.includes(\"Date at\") && x < x1 && y >= y1 && y <= y2) {\n          label = text;\n          break;\n        }\n\n        // Heuristic: If label contains \"Signature of Authorized Court Transcriptionist\" and input is below\n        if (text.includes(\"Signature of Authorized Court Transcriptionist\") && y < y1 && y1 - y < 50) {\n          label = text;\n          break;\n        }\n\n        // Heuristic: If label contains \"(Set out name and address, as well as telephone number and email)\" and input is below\n        if (text.includes(\"(Set out name and address, as well as telephone number and email)\") && y < y1 && y1 - y < 100) {\n          label = text;\n          break;\n        }\n\n        // Heuristic: If label starts with lowercase letter followed by a closing bracket or dot\n        if (/^[a-z]\\)|^[a-z]\\./.test(text) && Math.abs(y - y2) < 20) {\n          label = text;\n          break;\n        }\n      }\n      results.push({\n        label: label,\n        inputField: {\n          fieldName: annotation.fieldName || \"Unnamed Field\",\n          inputType: inputType,\n          value: fieldValue,\n          options: options\n        }\n      });\n    }\n  }\n  return results;\n}\n_c = PDF_TO_JSON;\nvar _c;\n$RefreshReg$(_c, \"PDF_TO_JSON\");","map":{"version":3,"names":["pdfjsLib","GlobalWorkerOptions","workerSrc","version","PDF_TO_JSON","pdfUrl","loadingTask","getDocument","url","cMapUrl","cMapPacked","pdf","promise","console","log","results","i","numPages","page","getPage","annotations","getAnnotations","textContent","getTextContent","items","sortedItems","sort","a","b","transform","annotation","x1","y1","x2","y2","rect","width","height","inputType","fieldType","checkBox","radioButton","fieldValue","options","map","opt","displayValue","value","label","item","c","d","x","y","text","str","trim","includes","test","Math","abs","push","inputField","fieldName","_c","$RefreshReg$"],"sources":["C:/Users/Vidu/OneDrive/Desktop/Xenon Innovation/Expenser/client/src/components/FillForm/PdfToJson.js"],"sourcesContent":["import * as pdfjsLib from 'pdfjs-dist';\r\n\r\n// Set up the worker for pdf.js\r\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\r\n\r\nexport async function PDF_TO_JSON(pdfUrl) {\r\n    const loadingTask = pdfjsLib.getDocument({\r\n        url: pdfUrl,\r\n        cMapUrl: \"https://unpkg.com/pdfjs-dist@latest/cmaps/\",\r\n        cMapPacked: true,\r\n    });\r\n\r\n    const pdf = await loadingTask.promise;\r\n    console.log(\"PDF loaded successfully\");\r\n\r\n    const results = [];\r\n\r\n    for (let i = 1; i <= pdf.numPages; i++) {\r\n        const page = await pdf.getPage(i);\r\n        const annotations = await page.getAnnotations();\r\n        const textContent = await page.getTextContent();\r\n        const items = textContent.items;\r\n\r\n        // Sort text items by Y position descending (top to bottom)\r\n        const sortedItems = items.sort((a, b) => b.transform[5] - a.transform[5]);\r\n\r\n        for (const annotation of annotations) {\r\n            const [x1, y1, x2, y2] = annotation.rect;\r\n            const width = x2 - x1;\r\n            const height = y2 - y1;\r\n\r\n            // Determine the field type\r\n            let inputType = \"Unknown\";\r\n            if (annotation.fieldType === \"Tx\") {\r\n                inputType = \"TextBox\";\r\n            } else if (annotation.fieldType === \"Ch\") {\r\n                inputType = \"DropDown\";\r\n            } else if (annotation.fieldType === \"Btn\") {\r\n                if (annotation.checkBox) {\r\n                    inputType = \"CheckBox\";\r\n                } else if (annotation.radioButton) {\r\n                    inputType = \"RadioButton\";\r\n                } else {\r\n                    inputType = \"Button\";\r\n                }\r\n            }\r\n\r\n            // Retrieve the field value\r\n            const fieldValue = annotation.fieldValue || \"\";\r\n\r\n            // Retrieve dropdown options if applicable\r\n            let options = [];\r\n            if (inputType === \"DropDown\" && annotation.options) {\r\n                options = annotation.options.map(opt => opt.displayValue || opt.value);\r\n            }\r\n\r\n            // Find associated label based on heuristics\r\n            let label = \"No associated label\";\r\n            for (const item of sortedItems) {\r\n                const [a, b, c, d, x, y] = item.transform;\r\n                const text = item.str.trim();\r\n\r\n                // Heuristic: If label contains \"Region\" or \"Court File No. (if known)\", it's above the input\r\n                if ([\"Region\", \"Court File No. (if known)\"].includes(text) && y > y2 && y - y2 < 50) {\r\n                    label = text;\r\n                    break;\r\n                }\r\n\r\n                // Heuristic: If label contains \"Date at\" and input is to the right\r\n                if (text.includes(\"Date at\") && x < x1 && y >= y1 && y <= y2) {\r\n                    label = text;\r\n                    break;\r\n                }\r\n\r\n                // Heuristic: If label contains \"Signature of Authorized Court Transcriptionist\" and input is below\r\n                if (text.includes(\"Signature of Authorized Court Transcriptionist\") && y < y1 && y1 - y < 50) {\r\n                    label = text;\r\n                    break;\r\n                }\r\n\r\n                // Heuristic: If label contains \"(Set out name and address, as well as telephone number and email)\" and input is below\r\n                if (text.includes(\"(Set out name and address, as well as telephone number and email)\") && y < y1 && y1 - y < 100) {\r\n                    label = text;\r\n                    break;\r\n                }\r\n\r\n                // Heuristic: If label starts with lowercase letter followed by a closing bracket or dot\r\n                if (/^[a-z]\\)|^[a-z]\\./.test(text) && Math.abs(y - y2) < 20) {\r\n                    label = text;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            results.push({\r\n                label: label,\r\n                inputField: {\r\n                    fieldName: annotation.fieldName || \"Unnamed Field\",\r\n                    inputType: inputType,\r\n                    value: fieldValue,\r\n                    options: options\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return results;\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,QAAQ,MAAM,YAAY;;AAEtC;AACAA,QAAQ,CAACC,mBAAmB,CAACC,SAAS,GAAG,2CAA2CF,QAAQ,CAACG,OAAO,oBAAoB;AAExH,OAAO,eAAeC,WAAWA,CAACC,MAAM,EAAE;EACtC,MAAMC,WAAW,GAAGN,QAAQ,CAACO,WAAW,CAAC;IACrCC,GAAG,EAAEH,MAAM;IACXI,OAAO,EAAE,4CAA4C;IACrDC,UAAU,EAAE;EAChB,CAAC,CAAC;EAEF,MAAMC,GAAG,GAAG,MAAML,WAAW,CAACM,OAAO;EACrCC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EAEtC,MAAMC,OAAO,GAAG,EAAE;EAElB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIL,GAAG,CAACM,QAAQ,EAAED,CAAC,EAAE,EAAE;IACpC,MAAME,IAAI,GAAG,MAAMP,GAAG,CAACQ,OAAO,CAACH,CAAC,CAAC;IACjC,MAAMI,WAAW,GAAG,MAAMF,IAAI,CAACG,cAAc,CAAC,CAAC;IAC/C,MAAMC,WAAW,GAAG,MAAMJ,IAAI,CAACK,cAAc,CAAC,CAAC;IAC/C,MAAMC,KAAK,GAAGF,WAAW,CAACE,KAAK;;IAE/B;IACA,MAAMC,WAAW,GAAGD,KAAK,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,SAAS,CAAC,CAAC,CAAC,GAAGF,CAAC,CAACE,SAAS,CAAC,CAAC,CAAC,CAAC;IAEzE,KAAK,MAAMC,UAAU,IAAIV,WAAW,EAAE;MAClC,MAAM,CAACW,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,GAAGJ,UAAU,CAACK,IAAI;MACxC,MAAMC,KAAK,GAAGH,EAAE,GAAGF,EAAE;MACrB,MAAMM,MAAM,GAAGH,EAAE,GAAGF,EAAE;;MAEtB;MACA,IAAIM,SAAS,GAAG,SAAS;MACzB,IAAIR,UAAU,CAACS,SAAS,KAAK,IAAI,EAAE;QAC/BD,SAAS,GAAG,SAAS;MACzB,CAAC,MAAM,IAAIR,UAAU,CAACS,SAAS,KAAK,IAAI,EAAE;QACtCD,SAAS,GAAG,UAAU;MAC1B,CAAC,MAAM,IAAIR,UAAU,CAACS,SAAS,KAAK,KAAK,EAAE;QACvC,IAAIT,UAAU,CAACU,QAAQ,EAAE;UACrBF,SAAS,GAAG,UAAU;QAC1B,CAAC,MAAM,IAAIR,UAAU,CAACW,WAAW,EAAE;UAC/BH,SAAS,GAAG,aAAa;QAC7B,CAAC,MAAM;UACHA,SAAS,GAAG,QAAQ;QACxB;MACJ;;MAEA;MACA,MAAMI,UAAU,GAAGZ,UAAU,CAACY,UAAU,IAAI,EAAE;;MAE9C;MACA,IAAIC,OAAO,GAAG,EAAE;MAChB,IAAIL,SAAS,KAAK,UAAU,IAAIR,UAAU,CAACa,OAAO,EAAE;QAChDA,OAAO,GAAGb,UAAU,CAACa,OAAO,CAACC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,YAAY,IAAID,GAAG,CAACE,KAAK,CAAC;MAC1E;;MAEA;MACA,IAAIC,KAAK,GAAG,qBAAqB;MACjC,KAAK,MAAMC,IAAI,IAAIxB,WAAW,EAAE;QAC5B,MAAM,CAACE,CAAC,EAAEC,CAAC,EAAEsB,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGJ,IAAI,CAACpB,SAAS;QACzC,MAAMyB,IAAI,GAAGL,IAAI,CAACM,GAAG,CAACC,IAAI,CAAC,CAAC;;QAE5B;QACA,IAAI,CAAC,QAAQ,EAAE,2BAA2B,CAAC,CAACC,QAAQ,CAACH,IAAI,CAAC,IAAID,CAAC,GAAGnB,EAAE,IAAImB,CAAC,GAAGnB,EAAE,GAAG,EAAE,EAAE;UACjFc,KAAK,GAAGM,IAAI;UACZ;QACJ;;QAEA;QACA,IAAIA,IAAI,CAACG,QAAQ,CAAC,SAAS,CAAC,IAAIL,CAAC,GAAGrB,EAAE,IAAIsB,CAAC,IAAIrB,EAAE,IAAIqB,CAAC,IAAInB,EAAE,EAAE;UAC1Dc,KAAK,GAAGM,IAAI;UACZ;QACJ;;QAEA;QACA,IAAIA,IAAI,CAACG,QAAQ,CAAC,gDAAgD,CAAC,IAAIJ,CAAC,GAAGrB,EAAE,IAAIA,EAAE,GAAGqB,CAAC,GAAG,EAAE,EAAE;UAC1FL,KAAK,GAAGM,IAAI;UACZ;QACJ;;QAEA;QACA,IAAIA,IAAI,CAACG,QAAQ,CAAC,mEAAmE,CAAC,IAAIJ,CAAC,GAAGrB,EAAE,IAAIA,EAAE,GAAGqB,CAAC,GAAG,GAAG,EAAE;UAC9GL,KAAK,GAAGM,IAAI;UACZ;QACJ;;QAEA;QACA,IAAI,mBAAmB,CAACI,IAAI,CAACJ,IAAI,CAAC,IAAIK,IAAI,CAACC,GAAG,CAACP,CAAC,GAAGnB,EAAE,CAAC,GAAG,EAAE,EAAE;UACzDc,KAAK,GAAGM,IAAI;UACZ;QACJ;MACJ;MAEAvC,OAAO,CAAC8C,IAAI,CAAC;QACTb,KAAK,EAAEA,KAAK;QACZc,UAAU,EAAE;UACRC,SAAS,EAAEjC,UAAU,CAACiC,SAAS,IAAI,eAAe;UAClDzB,SAAS,EAAEA,SAAS;UACpBS,KAAK,EAAEL,UAAU;UACjBC,OAAO,EAAEA;QACb;MACJ,CAAC,CAAC;IACN;EACJ;EAEA,OAAO5B,OAAO;AAClB;AAACiD,EAAA,GArGqB5D,WAAW;AAAA,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}