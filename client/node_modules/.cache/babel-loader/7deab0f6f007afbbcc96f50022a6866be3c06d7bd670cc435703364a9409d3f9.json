{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vidu\\\\OneDrive\\\\Desktop\\\\Xenon Innovation\\\\Expenser\\\\client\\\\src\\\\components\\\\FillForm\\\\FillForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { doc, updateDoc } from 'firebase/firestore';\nimport { db } from '../../config';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport { PDFDocument, rgb } from 'pdf-lib';\n\n// Set up the worker for pdf.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\nfunction FillForm({\n  pdfData,\n  onClose\n}) {\n  _s();\n  const [formValues, setFormValues] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Initialize form values\n  useEffect(() => {\n    if (!(pdfData !== null && pdfData !== void 0 && pdfData.formFields)) {\n      setError(\"No form fields found in this PDF\");\n      return;\n    }\n    const initialValues = {};\n    pdfData.formFields.forEach(field => {\n      initialValues[field.id] = field.value || '';\n    });\n    setFormValues(initialValues);\n  }, [pdfData]);\n  const handleInputChange = (fieldId, value) => {\n    setFormValues(prev => ({\n      ...prev,\n      [fieldId]: value\n    }));\n  };\n  const generateFilledPDF = async () => {\n    if (!(pdfData !== null && pdfData !== void 0 && pdfData.formFields) || pdfData.formFields.length === 0) {\n      setError(\"No form fields to fill out\");\n      return;\n    }\n    if (!pdfData.originalPdfUrl) {\n      setError(\"Original PDF URL is missing\");\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      // Validate the URL\n      const pdfUrl = new URL(pdfData.originalPdfUrl);\n      if (!pdfUrl.protocol.startsWith('http')) {\n        throw new Error('Invalid PDF URL protocol');\n      }\n\n      // Load the original PDF with timeout and error handling\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n\n      const response = await fetch(pdfData.originalPdfUrl, {\n        signal: controller.signal,\n        headers: {\n          'Accept': 'application/pdf'\n        }\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw new Error(`Failed to load PDF: ${response.status} ${response.statusText}`);\n      }\n      const pdfBytes = await response.arrayBuffer();\n      if (!pdfBytes || pdfBytes.byteLength === 0) {\n        throw new Error('Received empty PDF data');\n      }\n      const pdfDoc = await PDFDocument.load(pdfBytes);\n\n      // Add text to each page\n      for (const field of pdfData.formFields) {\n        const page = pdfDoc.getPage(field.position.page - 1);\n        const {\n          width,\n          height\n        } = page.getSize();\n\n        // Convert coordinates to PDF space\n        const x = field.position.x;\n        const y = height - field.position.y; // Flip Y coordinate\n\n        // Add the text\n        page.drawText(formValues[field.id] || '', {\n          x,\n          y,\n          size: 12,\n          color: rgb(0, 0, 0)\n        });\n      }\n\n      // Save the modified PDF\n      const modifiedPdfBytes = await pdfDoc.save();\n\n      // Create a download link\n      const blob = new Blob([modifiedPdfBytes], {\n        type: 'application/pdf'\n      });\n      const downloadUrl = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.download = `filled_${pdfData.name}`;\n      link.click();\n      URL.revokeObjectURL(downloadUrl);\n\n      // Update the form data in Firestore\n      const pdfRef = doc(db, 'pdfs', pdfData.id);\n      await updateDoc(pdfRef, {\n        formValues,\n        lastFilled: new Date().toISOString()\n      });\n      onClose();\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n      if (error.name === 'AbortError') {\n        setError('Request timed out while loading the PDF');\n      } else if (error.message.includes('Failed to load PDF')) {\n        setError('Unable to access the PDF file. Please check if the file exists and is accessible.');\n      } else {\n        setError('Error generating filled PDF: ' + error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  if (!(pdfData !== null && pdfData !== void 0 && pdfData.formFields) || pdfData.formFields.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fill-form-modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fill-form-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No form fields found in this PDF.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-button\",\n          onClick: onClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fill-form-modal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fill-form-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Fill Form: \", pdfData.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-fields\",\n        children: pdfData.formFields.map(field => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: field.id,\n            children: field.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 29\n          }, this), field.type === 'checkbox' ? /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: field.id,\n            checked: formValues[field.id] || false,\n            onChange: e => handleInputChange(field.id, e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 33\n          }, this) : field.type === 'signature' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"signature-pad\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: field.id,\n              value: formValues[field.id] || '',\n              onChange: e => handleInputChange(field.id, e.target.value),\n              placeholder: \"Type signature\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n            type: field.type,\n            id: field.id,\n            value: formValues[field.id] || '',\n            onChange: e => handleInputChange(field.id, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 33\n          }, this)]\n        }, field.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"generate-button\",\n          onClick: generateFilledPDF,\n          disabled: loading,\n          children: loading ? 'Generating PDF...' : 'Generate Filled PDF'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-button\",\n          onClick: onClose,\n          disabled: loading,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n}\n_s(FillForm, \"sYc5jaXsTVp9s8Eeg5YxQ6tiffo=\");\n_c = FillForm;\nexport default FillForm;\nvar _c;\n$RefreshReg$(_c, \"FillForm\");","map":{"version":3,"names":["React","useState","useEffect","doc","updateDoc","db","pdfjsLib","PDFDocument","rgb","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","FillForm","pdfData","onClose","_s","formValues","setFormValues","loading","setLoading","error","setError","formFields","initialValues","forEach","field","id","value","handleInputChange","fieldId","prev","generateFilledPDF","length","originalPdfUrl","pdfUrl","URL","protocol","startsWith","Error","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","headers","clearTimeout","ok","status","statusText","pdfBytes","arrayBuffer","byteLength","pdfDoc","load","page","getPage","position","width","height","getSize","x","y","drawText","size","color","modifiedPdfBytes","save","blob","Blob","type","downloadUrl","createObjectURL","link","document","createElement","href","download","name","click","revokeObjectURL","pdfRef","lastFilled","Date","toISOString","console","message","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","htmlFor","label","checked","onChange","e","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Vidu/OneDrive/Desktop/Xenon Innovation/Expenser/client/src/components/FillForm/FillForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { doc, updateDoc } from 'firebase/firestore';\r\nimport { db } from '../../config';\r\nimport * as pdfjsLib from 'pdfjs-dist';\r\nimport { PDFDocument, rgb } from 'pdf-lib';\r\n\r\n// Set up the worker for pdf.js\r\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\r\n\r\nfunction FillForm({ pdfData, onClose }) {\r\n    const [formValues, setFormValues] = useState({});\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Initialize form values\r\n    useEffect(() => {\r\n        if (!pdfData?.formFields) {\r\n            setError(\"No form fields found in this PDF\");\r\n            return;\r\n        }\r\n\r\n        const initialValues = {};\r\n        pdfData.formFields.forEach(field => {\r\n            initialValues[field.id] = field.value || '';\r\n        });\r\n        setFormValues(initialValues);\r\n    }, [pdfData]);\r\n\r\n    const handleInputChange = (fieldId, value) => {\r\n        setFormValues(prev => ({\r\n            ...prev,\r\n            [fieldId]: value\r\n        }));\r\n    };\r\n\r\n    const generateFilledPDF = async () => {\r\n        if (!pdfData?.formFields || pdfData.formFields.length === 0) {\r\n            setError(\"No form fields to fill out\");\r\n            return;\r\n        }\r\n\r\n        if (!pdfData.originalPdfUrl) {\r\n            setError(\"Original PDF URL is missing\");\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            // Validate the URL\r\n            const pdfUrl = new URL(pdfData.originalPdfUrl);\r\n            if (!pdfUrl.protocol.startsWith('http')) {\r\n                throw new Error('Invalid PDF URL protocol');\r\n            }\r\n\r\n            // Load the original PDF with timeout and error handling\r\n            const controller = new AbortController();\r\n            const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\r\n\r\n            const response = await fetch(pdfData.originalPdfUrl, {\r\n                signal: controller.signal,\r\n                headers: {\r\n                    'Accept': 'application/pdf'\r\n                }\r\n            });\r\n\r\n            clearTimeout(timeoutId);\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to load PDF: ${response.status} ${response.statusText}`);\r\n            }\r\n\r\n            const pdfBytes = await response.arrayBuffer();\r\n            if (!pdfBytes || pdfBytes.byteLength === 0) {\r\n                throw new Error('Received empty PDF data');\r\n            }\r\n\r\n            const pdfDoc = await PDFDocument.load(pdfBytes);\r\n\r\n            // Add text to each page\r\n            for (const field of pdfData.formFields) {\r\n                const page = pdfDoc.getPage(field.position.page - 1);\r\n                const { width, height } = page.getSize();\r\n                \r\n                // Convert coordinates to PDF space\r\n                const x = field.position.x;\r\n                const y = height - field.position.y; // Flip Y coordinate\r\n\r\n                // Add the text\r\n                page.drawText(formValues[field.id] || '', {\r\n                    x,\r\n                    y,\r\n                    size: 12,\r\n                    color: rgb(0, 0, 0)\r\n                });\r\n            }\r\n\r\n            // Save the modified PDF\r\n            const modifiedPdfBytes = await pdfDoc.save();\r\n            \r\n            // Create a download link\r\n            const blob = new Blob([modifiedPdfBytes], { type: 'application/pdf' });\r\n            const downloadUrl = URL.createObjectURL(blob);\r\n            const link = document.createElement('a');\r\n            link.href = downloadUrl;\r\n            link.download = `filled_${pdfData.name}`;\r\n            link.click();\r\n            URL.revokeObjectURL(downloadUrl);\r\n\r\n            // Update the form data in Firestore\r\n            const pdfRef = doc(db, 'pdfs', pdfData.id);\r\n            await updateDoc(pdfRef, {\r\n                formValues,\r\n                lastFilled: new Date().toISOString()\r\n            });\r\n\r\n            onClose();\r\n        } catch (error) {\r\n            console.error('Error generating PDF:', error);\r\n            if (error.name === 'AbortError') {\r\n                setError('Request timed out while loading the PDF');\r\n            } else if (error.message.includes('Failed to load PDF')) {\r\n                setError('Unable to access the PDF file. Please check if the file exists and is accessible.');\r\n            } else {\r\n                setError('Error generating filled PDF: ' + error.message);\r\n            }\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    if (!pdfData?.formFields || pdfData.formFields.length === 0) {\r\n        return (\r\n            <div className=\"fill-form-modal\">\r\n                <div className=\"fill-form-content\">\r\n                    <h2>Error</h2>\r\n                    <p>No form fields found in this PDF.</p>\r\n                    <button className=\"cancel-button\" onClick={onClose}>\r\n                        Close\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"fill-form-modal\">\r\n            <div className=\"fill-form-content\">\r\n                <h2>Fill Form: {pdfData.name}</h2>\r\n                \r\n                <div className=\"form-fields\">\r\n                    {pdfData.formFields.map((field) => (\r\n                        <div key={field.id} className=\"form-field\">\r\n                            <label htmlFor={field.id}>{field.label}</label>\r\n                            {field.type === 'checkbox' ? (\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    id={field.id}\r\n                                    checked={formValues[field.id] || false}\r\n                                    onChange={(e) => handleInputChange(field.id, e.target.checked)}\r\n                                />\r\n                            ) : field.type === 'signature' ? (\r\n                                <div className=\"signature-pad\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        id={field.id}\r\n                                        value={formValues[field.id] || ''}\r\n                                        onChange={(e) => handleInputChange(field.id, e.target.value)}\r\n                                        placeholder=\"Type signature\"\r\n                                    />\r\n                                </div>\r\n                            ) : (\r\n                                <input\r\n                                    type={field.type}\r\n                                    id={field.id}\r\n                                    value={formValues[field.id] || ''}\r\n                                    onChange={(e) => handleInputChange(field.id, e.target.value)}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {error && <div className=\"error\">{error}</div>}\r\n\r\n                <div className=\"button-group\">\r\n                    <button\r\n                        className=\"generate-button\"\r\n                        onClick={generateFilledPDF}\r\n                        disabled={loading}\r\n                    >\r\n                        {loading ? 'Generating PDF...' : 'Generate Filled PDF'}\r\n                    </button>\r\n                    <button\r\n                        className=\"cancel-button\"\r\n                        onClick={onClose}\r\n                        disabled={loading}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FillForm; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}