{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vidu\\\\OneDrive\\\\Desktop\\\\Xenon Innovation\\\\Expenser\\\\src\\\\components\\\\AddPDF\\\\AddPDF.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { doc, deleteDoc, addDoc, collection } from \"firebase/firestore\";\nimport { getStorage, ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport * as pdfjsLib from 'pdfjs-dist';\nimport \"../../pages/assets/styles/UploadPDF.css\"; //TODO: Update this to my own css script\n\nimport { db } from \"../../config.js\";\n\n// Set up the worker for pdf.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\nfunction AddPDF({\n  closeModal,\n  pdfID,\n  refreshUploadPDF\n}) {\n  _s();\n  const [selectedPDFFile, setSelectedPDFFile] = useState(null);\n  const [parsedData, setParsedData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const storage = getStorage();\n  const parsePDF = async file => {\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const pdf = await pdfjsLib.getDocument(arrayBuffer).promise;\n      const formFields = [];\n\n      // Process each page\n      for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {\n        const page = await pdf.getPage(pageNum);\n        const textContent = await page.getTextContent();\n\n        // Get page dimensions\n        const viewport = page.getViewport({\n          scale: 1.0\n        });\n\n        // Process text items on the page\n        textContent.items.forEach((item, index) => {\n          // Look for common form field indicators\n          const text = item.str.toLowerCase();\n          const isLabel = text.includes(':') || text.includes('?') || text.includes('(');\n          if (isLabel) {\n            // Calculate the position of the potential input field\n            const fieldPosition = {\n              x: item.transform[4],\n              y: item.transform[5],\n              width: 150,\n              // Default width for input fields\n              height: 20,\n              // Default height for input fields\n              page: pageNum\n            };\n\n            // Determine field type based on label text\n            let fieldType = 'text';\n            if (text.includes('date')) fieldType = 'date';\n            if (text.includes('email')) fieldType = 'email';\n            if (text.includes('phone')) fieldType = 'tel';\n            if (text.includes('amount') || text.includes('$')) fieldType = 'number';\n            if (text.includes('signature')) fieldType = 'signature';\n            if (text.includes('check') || text.includes('box')) fieldType = 'checkbox';\n            formFields.push({\n              id: `field_${pageNum}_${index}`,\n              label: item.str,\n              type: fieldType,\n              position: fieldPosition,\n              value: '',\n              required: false\n            });\n          }\n        });\n      }\n      return formFields;\n    } catch (error) {\n      console.error(\"PDF Parsing Error:\", error);\n      throw new Error(\"Error parsing PDF: \" + error.message);\n    }\n  };\n  const handleUpload = async () => {\n    if (!selectedPDFFile) {\n      setError(\"Please select a PDF file first\");\n      return;\n    }\n    if (!selectedPDFFile.type.includes('pdf')) {\n      setError(\"Please select a valid PDF file\");\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      // First parse the PDF\n      const parsedFields = await parsePDF(selectedPDFFile);\n      setParsedData(parsedFields);\n\n      // Then upload to Firebase Storage\n      const storageRef = ref(storage, `pdfs/${selectedPDFFile.name}`);\n      const snapshot = await uploadBytes(storageRef, selectedPDFFile);\n      const downloadURL = await getDownloadURL(snapshot.ref);\n\n      // Store the parsed data in Firestore along with the PDF metadata\n      const pdfDoc = {\n        name: selectedPDFFile.name,\n        url: downloadURL,\n        size: selectedPDFFile.size,\n        contentType: selectedPDFFile.type,\n        formFields: parsedFields,\n        originalPdfUrl: downloadURL,\n        uploadedAt: new Date().toISOString()\n      };\n\n      // Add to Firestore collection\n      await addDoc(collection(db, \"pdfs\"), pdfDoc);\n\n      // Refresh the list and close modal\n      refreshUploadPDF && refreshUploadPDF();\n      closeModal();\n    } catch (error) {\n      console.error(\"Error processing PDF:\", error);\n      setError(error.message || \"Error uploading PDF. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const browseFile = async () => {\n    try {\n      const input = document.createElement(\"input\");\n      input.type = \"file\";\n      input.accept = \"application/pdf\";\n      input.onchange = async event => {\n        const file = event.target.files[0];\n        if (file) {\n          if (!file.type.includes('pdf')) {\n            setError(\"Please select a valid PDF file\");\n            return;\n          }\n          setSelectedPDFFile(file);\n          setError(null);\n        }\n      };\n      input.click();\n    } catch (error) {\n      console.error(\"Error Browsing PDF File: \", error);\n      setError(\"Error selecting file: \" + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Upload PDF File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Upload your legal form PDF to create a fillable version!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Selected File: \", (selectedPDFFile === null || selectedPDFFile === void 0 ? void 0 : selectedPDFFile.name) || \"No file selected\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Processing PDF...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 29\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 27\n      }, this), parsedData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"preview-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Detected Form Fields:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-fields-preview\",\n          children: parsedData.map((field, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"field-preview\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"field-label\",\n              children: field.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"field-type\",\n              children: [\"(\", field.type, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 37\n            }, this)]\n          }, field.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modal-button\",\n          onClick: browseFile,\n          disabled: loading,\n          children: \"Browse File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modal-button\",\n          onClick: handleUpload,\n          disabled: loading || !selectedPDFFile,\n          children: \"Upload PDF File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-button\",\n          onClick: closeModal,\n          disabled: loading,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n}\n_s(AddPDF, \"/Xl4v369O4re4puV6hIfXBBhydw=\");\n_c = AddPDF;\nexport default AddPDF;\nvar _c;\n$RefreshReg$(_c, \"AddPDF\");","map":{"version":3,"names":["React","useState","useEffect","doc","deleteDoc","addDoc","collection","getStorage","ref","uploadBytes","getDownloadURL","pdfjsLib","db","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","version","AddPDF","closeModal","pdfID","refreshUploadPDF","_s","selectedPDFFile","setSelectedPDFFile","parsedData","setParsedData","loading","setLoading","error","setError","storage","parsePDF","file","arrayBuffer","pdf","getDocument","promise","formFields","pageNum","numPages","page","getPage","textContent","getTextContent","viewport","getViewport","scale","items","forEach","item","index","text","str","toLowerCase","isLabel","includes","fieldPosition","x","transform","y","width","height","fieldType","push","id","label","type","position","value","required","console","Error","message","handleUpload","parsedFields","storageRef","name","snapshot","downloadURL","pdfDoc","url","size","contentType","originalPdfUrl","uploadedAt","Date","toISOString","browseFile","input","document","createElement","accept","onchange","event","target","files","click","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","field","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Vidu/OneDrive/Desktop/Xenon Innovation/Expenser/src/components/AddPDF/AddPDF.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { doc, deleteDoc, addDoc, collection } from \"firebase/firestore\";\r\nimport { getStorage, ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\r\nimport * as pdfjsLib from 'pdfjs-dist';\r\n\r\nimport \"../../pages/assets/styles/UploadPDF.css\";//TODO: Update this to my own css script\r\n\r\nimport { db } from \"../../config.js\";\r\n\r\n// Set up the worker for pdf.js\r\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\r\n\r\nfunction AddPDF({ closeModal, pdfID, refreshUploadPDF }) {\r\n    const [selectedPDFFile, setSelectedPDFFile] = useState(null);\r\n    const [parsedData, setParsedData] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const storage = getStorage();\r\n\r\n    const parsePDF = async (file) => {\r\n        try {\r\n            const arrayBuffer = await file.arrayBuffer();\r\n            const pdf = await pdfjsLib.getDocument(arrayBuffer).promise;\r\n            const formFields = [];\r\n            \r\n            // Process each page\r\n            for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {\r\n                const page = await pdf.getPage(pageNum);\r\n                const textContent = await page.getTextContent();\r\n                \r\n                // Get page dimensions\r\n                const viewport = page.getViewport({ scale: 1.0 });\r\n                \r\n                // Process text items on the page\r\n                textContent.items.forEach((item, index) => {\r\n                    // Look for common form field indicators\r\n                    const text = item.str.toLowerCase();\r\n                    const isLabel = text.includes(':') || text.includes('?') || text.includes('(');\r\n                    \r\n                    if (isLabel) {\r\n                        // Calculate the position of the potential input field\r\n                        const fieldPosition = {\r\n                            x: item.transform[4],\r\n                            y: item.transform[5],\r\n                            width: 150, // Default width for input fields\r\n                            height: 20, // Default height for input fields\r\n                            page: pageNum\r\n                        };\r\n\r\n                        // Determine field type based on label text\r\n                        let fieldType = 'text';\r\n                        if (text.includes('date')) fieldType = 'date';\r\n                        if (text.includes('email')) fieldType = 'email';\r\n                        if (text.includes('phone')) fieldType = 'tel';\r\n                        if (text.includes('amount') || text.includes('$')) fieldType = 'number';\r\n                        if (text.includes('signature')) fieldType = 'signature';\r\n                        if (text.includes('check') || text.includes('box')) fieldType = 'checkbox';\r\n\r\n                        formFields.push({\r\n                            id: `field_${pageNum}_${index}`,\r\n                            label: item.str,\r\n                            type: fieldType,\r\n                            position: fieldPosition,\r\n                            value: '',\r\n                            required: false\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            \r\n            return formFields;\r\n        } catch (error) {\r\n            console.error(\"PDF Parsing Error:\", error);\r\n            throw new Error(\"Error parsing PDF: \" + error.message);\r\n        }\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n        if (!selectedPDFFile) {\r\n            setError(\"Please select a PDF file first\");\r\n            return;\r\n        }\r\n\r\n        if (!selectedPDFFile.type.includes('pdf')) {\r\n            setError(\"Please select a valid PDF file\");\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            // First parse the PDF\r\n            const parsedFields = await parsePDF(selectedPDFFile);\r\n            setParsedData(parsedFields);\r\n\r\n            // Then upload to Firebase Storage\r\n            const storageRef = ref(storage, `pdfs/${selectedPDFFile.name}`);\r\n            const snapshot = await uploadBytes(storageRef, selectedPDFFile);\r\n            const downloadURL = await getDownloadURL(snapshot.ref);\r\n\r\n            // Store the parsed data in Firestore along with the PDF metadata\r\n            const pdfDoc = {\r\n                name: selectedPDFFile.name,\r\n                url: downloadURL,\r\n                size: selectedPDFFile.size,\r\n                contentType: selectedPDFFile.type,\r\n                formFields: parsedFields,\r\n                originalPdfUrl: downloadURL,\r\n                uploadedAt: new Date().toISOString()\r\n            };\r\n\r\n            // Add to Firestore collection\r\n            await addDoc(collection(db, \"pdfs\"), pdfDoc);\r\n\r\n            // Refresh the list and close modal\r\n            refreshUploadPDF && refreshUploadPDF();\r\n            closeModal();\r\n        } catch (error) {\r\n            console.error(\"Error processing PDF:\", error);\r\n            setError(error.message || \"Error uploading PDF. Please try again.\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const browseFile = async () => {\r\n        try {\r\n            const input = document.createElement(\"input\");\r\n            input.type = \"file\";\r\n            input.accept = \"application/pdf\";\r\n\r\n            input.onchange = async (event) => {\r\n                const file = event.target.files[0];\r\n                if (file) {\r\n                    if (!file.type.includes('pdf')) {\r\n                        setError(\"Please select a valid PDF file\");\r\n                        return;\r\n                    }\r\n                    setSelectedPDFFile(file);\r\n                    setError(null);\r\n                }\r\n            };\r\n\r\n            input.click();\r\n        } catch (error) {\r\n            console.error(\"Error Browsing PDF File: \", error);\r\n            setError(\"Error selecting file: \" + error.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"modal-overlay\">\r\n            <div className=\"modal-content\">\r\n                <h2>Upload PDF File</h2>\r\n                <p>\r\n                    Upload your legal form PDF to create a fillable version!\r\n                </p>\r\n\r\n                <p>Selected File: {selectedPDFFile?.name || \"No file selected\"}</p>\r\n                \r\n                {loading && <div className=\"loading\">Processing PDF...</div>}\r\n                {error && <div className=\"error\">{error}</div>}\r\n\r\n                {parsedData && (\r\n                    <div className=\"preview-section\">\r\n                        <h3>Detected Form Fields:</h3>\r\n                        <div className=\"form-fields-preview\">\r\n                            {parsedData.map((field, index) => (\r\n                                <div key={field.id} className=\"field-preview\">\r\n                                    <span className=\"field-label\">{field.label}</span>\r\n                                    <span className=\"field-type\">({field.type})</span>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                <div className=\"button-group\">\r\n                    <button \r\n                        className=\"modal-button\" \r\n                        onClick={browseFile}\r\n                        disabled={loading}\r\n                    >\r\n                        Browse File\r\n                    </button>\r\n                    <button \r\n                        className=\"modal-button\" \r\n                        onClick={handleUpload}\r\n                        disabled={loading || !selectedPDFFile}\r\n                    >\r\n                        Upload PDF File\r\n                    </button>\r\n                    <button \r\n                        className=\"cancel-button\" \r\n                        onClick={closeModal}\r\n                        disabled={loading}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddPDF;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,SAAS,EAAEC,MAAM,EAAEC,UAAU,QAAQ,oBAAoB;AACvE,SAASC,UAAU,EAAEC,GAAG,EAAEC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAC/E,OAAO,KAAKC,QAAQ,MAAM,YAAY;AAEtC,OAAO,yCAAyC,CAAC;;AAEjD,SAASC,EAAE,QAAQ,iBAAiB;;AAEpC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAH,QAAQ,CAACI,mBAAmB,CAACC,SAAS,GAAG,2CAA2CL,QAAQ,CAACM,OAAO,oBAAoB;AAExH,SAASC,MAAMA,CAAC;EAAEC,UAAU;EAAEC,KAAK;EAAEC;AAAiB,CAAC,EAAE;EAAAC,EAAA;EACrD,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAAC0B,OAAO,EAAEC,UAAU,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAAC4B,KAAK,EAAEC,QAAQ,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM8B,OAAO,GAAGxB,UAAU,CAAC,CAAC;EAE5B,MAAMyB,QAAQ,GAAG,MAAOC,IAAI,IAAK;IAC7B,IAAI;MACA,MAAMC,WAAW,GAAG,MAAMD,IAAI,CAACC,WAAW,CAAC,CAAC;MAC5C,MAAMC,GAAG,GAAG,MAAMxB,QAAQ,CAACyB,WAAW,CAACF,WAAW,CAAC,CAACG,OAAO;MAC3D,MAAMC,UAAU,GAAG,EAAE;;MAErB;MACA,KAAK,IAAIC,OAAO,GAAG,CAAC,EAAEA,OAAO,IAAIJ,GAAG,CAACK,QAAQ,EAAED,OAAO,EAAE,EAAE;QACtD,MAAME,IAAI,GAAG,MAAMN,GAAG,CAACO,OAAO,CAACH,OAAO,CAAC;QACvC,MAAMI,WAAW,GAAG,MAAMF,IAAI,CAACG,cAAc,CAAC,CAAC;;QAE/C;QACA,MAAMC,QAAQ,GAAGJ,IAAI,CAACK,WAAW,CAAC;UAAEC,KAAK,EAAE;QAAI,CAAC,CAAC;;QAEjD;QACAJ,WAAW,CAACK,KAAK,CAACC,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;UACvC;UACA,MAAMC,IAAI,GAAGF,IAAI,CAACG,GAAG,CAACC,WAAW,CAAC,CAAC;UACnC,MAAMC,OAAO,GAAGH,IAAI,CAACI,QAAQ,CAAC,GAAG,CAAC,IAAIJ,IAAI,CAACI,QAAQ,CAAC,GAAG,CAAC,IAAIJ,IAAI,CAACI,QAAQ,CAAC,GAAG,CAAC;UAE9E,IAAID,OAAO,EAAE;YACT;YACA,MAAME,aAAa,GAAG;cAClBC,CAAC,EAAER,IAAI,CAACS,SAAS,CAAC,CAAC,CAAC;cACpBC,CAAC,EAAEV,IAAI,CAACS,SAAS,CAAC,CAAC,CAAC;cACpBE,KAAK,EAAE,GAAG;cAAE;cACZC,MAAM,EAAE,EAAE;cAAE;cACZrB,IAAI,EAAEF;YACV,CAAC;;YAED;YACA,IAAIwB,SAAS,GAAG,MAAM;YACtB,IAAIX,IAAI,CAACI,QAAQ,CAAC,MAAM,CAAC,EAAEO,SAAS,GAAG,MAAM;YAC7C,IAAIX,IAAI,CAACI,QAAQ,CAAC,OAAO,CAAC,EAAEO,SAAS,GAAG,OAAO;YAC/C,IAAIX,IAAI,CAACI,QAAQ,CAAC,OAAO,CAAC,EAAEO,SAAS,GAAG,KAAK;YAC7C,IAAIX,IAAI,CAACI,QAAQ,CAAC,QAAQ,CAAC,IAAIJ,IAAI,CAACI,QAAQ,CAAC,GAAG,CAAC,EAAEO,SAAS,GAAG,QAAQ;YACvE,IAAIX,IAAI,CAACI,QAAQ,CAAC,WAAW,CAAC,EAAEO,SAAS,GAAG,WAAW;YACvD,IAAIX,IAAI,CAACI,QAAQ,CAAC,OAAO,CAAC,IAAIJ,IAAI,CAACI,QAAQ,CAAC,KAAK,CAAC,EAAEO,SAAS,GAAG,UAAU;YAE1EzB,UAAU,CAAC0B,IAAI,CAAC;cACZC,EAAE,EAAE,SAAS1B,OAAO,IAAIY,KAAK,EAAE;cAC/Be,KAAK,EAAEhB,IAAI,CAACG,GAAG;cACfc,IAAI,EAAEJ,SAAS;cACfK,QAAQ,EAAEX,aAAa;cACvBY,KAAK,EAAE,EAAE;cACTC,QAAQ,EAAE;YACd,CAAC,CAAC;UACN;QACJ,CAAC,CAAC;MACN;MAEA,OAAOhC,UAAU;IACrB,CAAC,CAAC,OAAOT,KAAK,EAAE;MACZ0C,OAAO,CAAC1C,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAM,IAAI2C,KAAK,CAAC,qBAAqB,GAAG3C,KAAK,CAAC4C,OAAO,CAAC;IAC1D;EACJ,CAAC;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAACnD,eAAe,EAAE;MAClBO,QAAQ,CAAC,gCAAgC,CAAC;MAC1C;IACJ;IAEA,IAAI,CAACP,eAAe,CAAC4C,IAAI,CAACX,QAAQ,CAAC,KAAK,CAAC,EAAE;MACvC1B,QAAQ,CAAC,gCAAgC,CAAC;MAC1C;IACJ;IAEAF,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACA;MACA,MAAM6C,YAAY,GAAG,MAAM3C,QAAQ,CAACT,eAAe,CAAC;MACpDG,aAAa,CAACiD,YAAY,CAAC;;MAE3B;MACA,MAAMC,UAAU,GAAGpE,GAAG,CAACuB,OAAO,EAAE,QAAQR,eAAe,CAACsD,IAAI,EAAE,CAAC;MAC/D,MAAMC,QAAQ,GAAG,MAAMrE,WAAW,CAACmE,UAAU,EAAErD,eAAe,CAAC;MAC/D,MAAMwD,WAAW,GAAG,MAAMrE,cAAc,CAACoE,QAAQ,CAACtE,GAAG,CAAC;;MAEtD;MACA,MAAMwE,MAAM,GAAG;QACXH,IAAI,EAAEtD,eAAe,CAACsD,IAAI;QAC1BI,GAAG,EAAEF,WAAW;QAChBG,IAAI,EAAE3D,eAAe,CAAC2D,IAAI;QAC1BC,WAAW,EAAE5D,eAAe,CAAC4C,IAAI;QACjC7B,UAAU,EAAEqC,YAAY;QACxBS,cAAc,EAAEL,WAAW;QAC3BM,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACvC,CAAC;;MAED;MACA,MAAMlF,MAAM,CAACC,UAAU,CAACM,EAAE,EAAE,MAAM,CAAC,EAAEoE,MAAM,CAAC;;MAE5C;MACA3D,gBAAgB,IAAIA,gBAAgB,CAAC,CAAC;MACtCF,UAAU,CAAC,CAAC;IAChB,CAAC,CAAC,OAAOU,KAAK,EAAE;MACZ0C,OAAO,CAAC1C,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CC,QAAQ,CAACD,KAAK,CAAC4C,OAAO,IAAI,wCAAwC,CAAC;IACvE,CAAC,SAAS;MACN7C,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,MAAM4D,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACA,MAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;MAC7CF,KAAK,CAACtB,IAAI,GAAG,MAAM;MACnBsB,KAAK,CAACG,MAAM,GAAG,iBAAiB;MAEhCH,KAAK,CAACI,QAAQ,GAAG,MAAOC,KAAK,IAAK;QAC9B,MAAM7D,IAAI,GAAG6D,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;QAClC,IAAI/D,IAAI,EAAE;UACN,IAAI,CAACA,IAAI,CAACkC,IAAI,CAACX,QAAQ,CAAC,KAAK,CAAC,EAAE;YAC5B1B,QAAQ,CAAC,gCAAgC,CAAC;YAC1C;UACJ;UACAN,kBAAkB,CAACS,IAAI,CAAC;UACxBH,QAAQ,CAAC,IAAI,CAAC;QAClB;MACJ,CAAC;MAED2D,KAAK,CAACQ,KAAK,CAAC,CAAC;IACjB,CAAC,CAAC,OAAOpE,KAAK,EAAE;MACZ0C,OAAO,CAAC1C,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDC,QAAQ,CAAC,wBAAwB,GAAGD,KAAK,CAAC4C,OAAO,CAAC;IACtD;EACJ,CAAC;EAED,oBACI3D,OAAA;IAAKoF,SAAS,EAAC,eAAe;IAAAC,QAAA,eAC1BrF,OAAA;MAAKoF,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC1BrF,OAAA;QAAAqF,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBzF,OAAA;QAAAqF,QAAA,EAAG;MAEH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAEJzF,OAAA;QAAAqF,QAAA,GAAG,iBAAe,EAAC,CAAA5E,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEsD,IAAI,KAAI,kBAAkB;MAAA;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAElE5E,OAAO,iBAAIb,OAAA;QAAKoF,SAAS,EAAC,SAAS;QAAAC,QAAA,EAAC;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAC3D1E,KAAK,iBAAIf,OAAA;QAAKoF,SAAS,EAAC,OAAO;QAAAC,QAAA,EAAEtE;MAAK;QAAAuE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EAE7C9E,UAAU,iBACPX,OAAA;QAAKoF,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC5BrF,OAAA;UAAAqF,QAAA,EAAI;QAAqB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9BzF,OAAA;UAAKoF,SAAS,EAAC,qBAAqB;UAAAC,QAAA,EAC/B1E,UAAU,CAAC+E,GAAG,CAAC,CAACC,KAAK,EAAEtD,KAAK,kBACzBrC,OAAA;YAAoBoF,SAAS,EAAC,eAAe;YAAAC,QAAA,gBACzCrF,OAAA;cAAMoF,SAAS,EAAC,aAAa;cAAAC,QAAA,EAAEM,KAAK,CAACvC;YAAK;cAAAkC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAClDzF,OAAA;cAAMoF,SAAS,EAAC,YAAY;cAAAC,QAAA,GAAC,GAAC,EAACM,KAAK,CAACtC,IAAI,EAAC,GAAC;YAAA;cAAAiC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA,GAF5CE,KAAK,CAACxC,EAAE;YAAAmC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGb,CACR;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CACR,eAEDzF,OAAA;QAAKoF,SAAS,EAAC,cAAc;QAAAC,QAAA,gBACzBrF,OAAA;UACIoF,SAAS,EAAC,cAAc;UACxBQ,OAAO,EAAElB,UAAW;UACpBmB,QAAQ,EAAEhF,OAAQ;UAAAwE,QAAA,EACrB;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTzF,OAAA;UACIoF,SAAS,EAAC,cAAc;UACxBQ,OAAO,EAAEhC,YAAa;UACtBiC,QAAQ,EAAEhF,OAAO,IAAI,CAACJ,eAAgB;UAAA4E,QAAA,EACzC;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTzF,OAAA;UACIoF,SAAS,EAAC,eAAe;UACzBQ,OAAO,EAAEvF,UAAW;UACpBwF,QAAQ,EAAEhF,OAAQ;UAAAwE,QAAA,EACrB;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACjF,EAAA,CAhMQJ,MAAM;AAAA0F,EAAA,GAAN1F,MAAM;AAkMf,eAAeA,MAAM;AAAC,IAAA0F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}